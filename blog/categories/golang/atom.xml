<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | 贾斌 Jerry Bean]]></title>
  <link href="http://jerrybean.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://jerrybean.github.io/"/>
  <updated>2017-04-27T00:48:58+08:00</updated>
  <id>http://jerrybean.github.io/</id>
  <author>
    <name><![CDATA[jerrybean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[golang-error处理]]></title>
    <link href="http://jerrybean.github.io/blog/2017/04/27/golang-error/"/>
    <updated>2017-04-27T00:14:45+08:00</updated>
    <id>http://jerrybean.github.io/blog/2017/04/27/golang-error</id>
    <content type="html"><![CDATA[<h2>Golang error</h2>

<h3>什么是 Golang error</h3>

<ol>
<li>Golang 的 error 是内置的类型,无论是标准包还是各大开源项目中都包含着各种对 error 的处理，   <a href="https://blog.golang.org/error-handling-and-go">golang-error-blog</a> 中有详细的例子。</li>
<li>Golang 的设计之一就是要在调用处处理 error, 而未采用其它语言(类似python,java) 的try+catch 模式，这样会使得逻辑更加清晰，但是代码中会充斥着各种类似如下片段
<code>
    a, err := doSomeThing()
    if err != nil {
        log.fatal(err)
    }
</code></li>
</ol>

]]></content>
  </entry>
  
</feed>
